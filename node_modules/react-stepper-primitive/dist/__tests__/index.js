'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');

var _require = require('enzyme'),
    mount = _require.mount;

var Stepper = require('../');

function setup() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref$render = _ref.render,
      render = _ref$render === undefined ? function () {
    return React.createElement('div', null);
  } : _ref$render,
      props = _objectWithoutProperties(_ref, ['render']);

  var renderArg = void 0;
  var renderSpy = jest.fn(function (arg) {
    renderArg = arg;
    return render(arg);
  });
  var wrapper = mount(React.createElement(Stepper, _extends({}, props, { render: renderSpy })));
  return _extends({ renderSpy: renderSpy, wrapper: wrapper }, renderArg);
}

test('value defaults to 0', function () {
  var _setup = setup(),
      value = _setup.value;

  expect(value).toBe(0);
});

test('value follows defaultValue', function () {
  var _setup2 = setup({ defaultValue: 33 }),
      value = _setup2.value;

  expect(value).toBe(33);
});

test('getFormProps', function () {
  var _setup3 = setup({}),
      getFormProps = _setup3.getFormProps;

  expect(getFormProps()).toMatchSnapshot();
});

test('getInputProps', function () {
  var _setup4 = setup({}),
      wrapper = _setup4.wrapper,
      getInputProps = _setup4.getInputProps;

  expect(getInputProps().value).toBe(0);
  expect(getInputProps()).toMatchSnapshot();
  wrapper.setState({ focused: true });
  expect(getInputProps().value).toBe(undefined);
  expect(getInputProps()).toMatchSnapshot();
});

test('getIncrementProps', function () {
  var _setup5 = setup(),
      getIncrementProps = _setup5.getIncrementProps;

  expect(getIncrementProps()).toMatchSnapshot();
});

test('getDecrementProps', function () {
  var _setup6 = setup(),
      getDecrementProps = _setup6.getDecrementProps;

  expect(getDecrementProps()).toMatchSnapshot();
});

test('setValue is between [min, max]', function () {
  var _setup7 = setup({ min: 0, max: 1 }),
      wrapper = _setup7.wrapper,
      setValue = _setup7.setValue;

  setValue(2);
  expect(wrapper.state('value')).toBe(1);
  setValue(-1);
  expect(wrapper.state('value')).toBe(0);
  setValue(1);
  expect(wrapper.state('value')).toBe(1);
  setValue(0);
  expect(wrapper.state('value')).toBe(0);
});

test('increment/decrement are capped at min/max', function () {
  var _setup8 = setup({ min: 0, max: 1 }),
      wrapper = _setup8.wrapper,
      increment = _setup8.increment,
      decrement = _setup8.decrement;

  expect(wrapper.state('value')).toBe(0);
  increment();
  expect(wrapper.state('value')).toBe(1);
  increment();
  expect(wrapper.state('value')).toBe(1);
  decrement();
  expect(wrapper.state('value')).toBe(0);
  decrement();
  expect(wrapper.state('value')).toBe(0);
});

describe('enableReinitialize', function () {
  test('true: value is updated to new default if defaultValue changes', function () {
    var _setup9 = setup({ defaultValue: 33, enableReinitialize: true }),
        wrapper = _setup9.wrapper;

    expect(wrapper.state('value')).toBe(33);
    wrapper.setProps({ defaultValue: 42 });
    expect(wrapper.state('value')).toBe(42);
  });

  test('false: value remains unchanged if defaultValue changes', function () {
    var _setup10 = setup({ defaultValue: 33 }),
        wrapper = _setup10.wrapper;

    expect(wrapper.state('value')).toBe(33);
    wrapper.setProps({ defaultValue: 42 });
    expect(wrapper.state('value')).toBe(33);
  });
});