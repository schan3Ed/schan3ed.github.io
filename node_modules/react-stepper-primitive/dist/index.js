'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PropTypes = require('prop-types');
var numericPattern = require('numeric-pattern');

var callAll = function callAll() {
  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function (arg) {
    return fns.forEach(function (fn) {
      return fn && fn(arg);
    });
  };
};

module.exports = exports.default = (_temp2 = _class = function (_React$Component) {
  _inherits(StepperPrimitive, _React$Component);

  function StepperPrimitive() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, StepperPrimitive);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = StepperPrimitive.__proto__ || Object.getPrototypeOf(StepperPrimitive)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: _this.getValue({ value: _this.props.defaultValue })
    }, _this.setValue = function (value) {
      value = Math.min(_this.props.max, Math.max(value, _this.props.min));
      if (_this.isControlled()) {
        _this.props.onChange(value);
      } else {
        _this.setState({ value: value }, function () {
          return _this.props.onChange(_this.getValue());
        });
      }
    }, _this.increment = function () {
      _this.setValue(_this.getValue() + _this.props.step);
    }, _this.decrement = function () {
      _this.setValue(_this.getValue() - _this.props.step);
    }, _this.handleSubmit = function (ev) {
      ev.preventDefault();
      if (_this.input) _this.input.blur();
    }, _this.handleInputRef = function (node) {
      if (!node) return;
      _this.input = node;
    }, _this.handleBlur = function () {
      if (!_this.input) return;
      _this.input.blur();
      _this.setState({ focused: false });

      var value = parseFloat(_this.input.value);
      if (isNaN(value) || value === _this.getValue()) return;

      _this.setValue(value);
    }, _this.handleFocus = function () {
      if (!_this.input) return;
      _this.setState({ focused: true }, function () {
        _this.input.value = _this.getValue();
        _this.input.setSelectionRange(0, 9999);
      });
    }, _this.getFormProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return {
        onSubmit: _this.handleSubmit
      };
    }, _this.getIncrementProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return {
        onClick: callAll(props.onClick, _this.increment)
      };
    }, _this.getDecrementProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return {
        onClick: callAll(props.onClick, _this.decrement)
      };
    }, _this.getInputProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _extends({
        type: 'text',
        ref: callAll(props.ref, _this.handleInputRef),
        pattern: numericPattern,
        onBlur: callAll(props.onBlur, _this.handleBlur),
        onFocus: callAll(props.onFocus, _this.handleFocus),
        focused: _this.state.focused
      }, _this.state.focused ? {} : {
        value: _this.getValue()
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(StepperPrimitive, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.enableReinitialize && this.props.defaultValue !== nextProps.defaultValue && this.props.defaultValue === this.state.value) {
        this.setValue(nextProps.defaultValue);
      }
    }
  }, {
    key: 'isControlled',
    value: function isControlled() {
      return this.props.value !== undefined;
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;

      return this.isControlled() ? this.props.value : state.value;
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.render({
        value: this.getValue(),
        focused: this.state.focused,
        increment: this.increment,
        decrement: this.decrement,
        setValue: this.setValue,
        getFormProps: this.getFormProps,
        getInputProps: this.getInputProps,
        getIncrementProps: this.getIncrementProps,
        getDecrementProps: this.getDecrementProps
      });
    }
  }]);

  return StepperPrimitive;
}(React.Component), _class.propTypes = {
  defaultValue: PropTypes.number,
  value: PropTypes.number,
  step: PropTypes.number,
  min: PropTypes.number,
  max: PropTypes.number,
  onChange: PropTypes.func,
  render: PropTypes.func.isRequired,
  enableReinitialize: PropTypes.bool
}, _class.defaultProps = {
  defaultValue: 0,
  step: 1,
  min: -Number.MAX_VALUE,
  max: Number.MAX_VALUE,
  onChange: function onChange() {},
  enableReinitialize: false
}, _temp2);